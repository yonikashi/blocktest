---
# resources:
# https://wiki.archlinux.org/index.php/Sysctl#Improving_performance
# https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt

- sysctl:
    name: "{{item.name}}"
    value: "{{item.value}}"
    sysctl_file: /etc/sysctl.d/99-sysctl.conf
  with_items:
    # Increase system file descriptor limit so we will (probably) never run out under lots of concurrent requests.
    # Per-process limit is set in /etc/security/limits.conf
    - name: fs.file-max
      value: 5000000

    # Increase the socket listening backlog.
    # somaxconn defines the number of request_sock structures allocated per each listen call.
    # The queue is persistent through the life of the listen socket.
    #
    # https://serverfault.com/questions/518862/will-increasing-net-core-somaxconn-make-a-difference/519152
    - name: net.core.somaxconn
      value: 65535

    # Increase number of incoming connections backlog queue.
    # Sets the maximum number of packets, queued on the INPUT side,
    # when the interface receives packets faster than the kernel can process them.
    - name: net.core.netdev_max_backlog
      value: 400000

    # Maximum queue length of pending connections 'Waiting Acknowledgment'.
    # In the event of a synflood DOS attack, this queue can fill up pretty quickly,
    # at which point tcp_syncookies will kick in allowing your system to continue to respond to legitimate traffic,
    # and allowing you to gain access to block malicious IPs.
    # If the server suffers from overloads at peak times, you may want to increase this value a little bit.
    - name: net.ipv4.tcp_max_syn_backlog
      value: 65536

    # Maximal number of TCP sockets not attached to any user file handle, held by system.
    # If this number is exceeded orphaned connections are reset immediately and warning is printed.
    # This limit exists only to prevent simple DoS attacks, you must not rely on this or lower the limit artificially,
    # but rather increase it (probably, after increasing installed memory), if network conditions require more than default value,
    # and tune network services to linger and kill such states more aggressively.
    - name: net.ipv4.tcp_max_orphans
      value: 262144

    # Increase the memory dedicated to the network interfaces:

    # Increase TCP max buffer size setable using setsockopt()
    # 16 MB with a few parallel streams is recommended for most 10G paths.
    # 32 MB might be needed for some very long end-to-end 10G or 40G paths.
    - name: net.core.rmem_max
      value: 16777216
    - name: net.core.wmem_max
      value: 16777216

    # Increase Linux autotuning TCP buffer limits min, default, and max # number of bytes to use
    # (only change the 3rd value, and make it 16 MB or more).
    - name: net.core.rmem_default
      value: 10000000
    - name: net.core.wmem_default
      value: 10000000
    - name: net.ipv4.tcp_mem
      value: 30000000 30000000 30000000
    - name: net.ipv4.tcp_rmem
      value: 30000000 30000000 30000000
    - name: net.ipv4.tcp_wmem
      value: 30000000 30000000 30000000

    # TCP Fast Open is an extension to the transmission control protocol (TCP) that helps reduce network latency
    # by enabling data to be exchanged during the senderâ€™s initial TCP SYN.
    # Using the value 3 instead of the default 1 allows TCP Fast Open for both incoming and outgoing connections.
    - name: net.ipv4.tcp_fastopen
      value: 3

    # Specify how many seconds to wait for a final FIN packet before the socket is forcibly closed.
    # This is strictly a violation of the TCP specification, but required to prevent denial-of-service attacks.
    # In Linux 2.2, the default value was 180
    - name: net.ipv4.tcp_fin_timeout
      value: 10

    # Sets whether TCP should reuse an existing connection in the TIME-WAIT state for a new outgoing connection
    # if the new timestamp is strictly bigger than the most recent timestamp recorded for the previous connection.
    # This helps avoid from running out of available network sockets.
    - name: net.ipv4.tcp_tw_reuse
      value: 1

    # Sets whether TCP should start at the default window size only for new connections or also for existing connections that have been idle for too long.
    # This setting kills persistent single connection performance and could be turned off.
    - name: net.ipv4.tcp_slow_start_after_idle
      value: 0

    # Only valid when the kernel was compiled with CONFIG_SYN_COOKIES
    # Send out syncookies when the syn backlog queue of a socket overflows.
    # Helps protect against SYN flood attacks.
    # Only kicks in when net.ipv4.tcp_max_syn_backlog is reached.
    - name: net.ipv4.tcp_syncookies
      value: 1

    # TCP timestamps protect against wrapping sequence numbers (at gigabit speeds) and round trip time calculation implemented in TCP.
    # Disabling timestamp generation will reduce spikes and may give a performance boost on gigabit networks:
    #
    # Warning: TCP timestamps protect against wrapping sequence numbers (at gigabit speeds) and round trip time calculation implemented in TCP.
    # It is not recommended to turn off TCP timestamps as it may cause a security risk:
    #
    # https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf
    - name: net.ipv4.tcp_timestamps
      value: 1

    # TCP keepalive is a mechanism for TCP connections that help to determine whether the other end has stopped responding or not.
    # TCP will send the keepalive probe contains null data to the network peer several times after a period of idle time.
    # If the peer does not respond, the socket will be closed automatically.
    # By default, TCP keepalive process waits for two hours (7200 secs) for socket activity before sending the first keepalive probe,
    # and then resend it every 75 seconds.
    # As long as there is TCP/IP socket communications going on and active, no keepalive packets are needed.
    #
    # With the following settings, your application will detect dead TCP connections after 120 seconds.
    - name: net.ipv4.tcp_keepalive_time
      value: 60
    - name: net.ipv4.tcp_keepalive_intvl
      value: 10
    - name: net.ipv4.tcp_keepalive_probes
      value: 6

    # Enable MTU probing.
    # The longer the MTU the better for performance, but the worse for reliability.
    # This is because a lost packet means more data to be retransmitted and because many routers on the Internet can't deliver very long packets.
    #
    # See https://blog.cloudflare.com/path-mtu-discovery-in-practice/ for more information.
    - name: net.ipv4.tcp_mtu_probing
      value: 1

    # Sets the kernels reverse path filtering mechanism to value 1 (on).
    # Will do source validation of the packet's received from all the interfaces on the machine.
    # Protects from attackers that are using ip spoofing methods to do harm (default).
    - name: net.ipv4.conf.all.rp_filter
      value: 1
    - name: net.ipv4.conf.default.rp_filter
      value: 1

    # Maximum number of sockets in 'TIME_WAIT' state.
    # After reaching this number the system will start destroying the socket that are in this state.
    # Increase this to prevent simple DOS attacks.
    - name: net.ipv4.tcp_max_tw_buckets
      value: 2000000

    # connection tracking limits
    # sysctl net.netfilter.nf_conntrack_count
    # hashsize = nf_conntrack_max / 8
    # echo 16384 > /sys/module/nf_conntrack/parameters/hashsize
    - name: net.netfilter.nf_conntrack_max - this always fails on the first time, so run twice
      value: 131072
      ignore_errors: yes

    # connection tracking limits
    # sysctl net.netfilter.nf_conntrack_count
    # hashsize = nf_conntrack_max / 8
    # echo 16384 > /sys/module/nf_conntrack/parameters/hashsize
    - name: net.netfilter.nf_conntrack_max
      value: 131072
